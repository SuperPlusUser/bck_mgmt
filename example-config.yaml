# Example config file for backup management script "bck_mgmt"

# Version 1.1 (17.12.2022)

backup_repository:

  - directory: /data/backups/test_repo1 # defines the base directory of your backup repository
    alias: Test-Repo 1          # optional: defines an alias for this repo which will be used in logs and reports etc.
    pattern: "*.bck"            # defines the pattern of the backup files you want to process. Use "*" as wildcard and put the entire expression into quotation marks.
    keep: 3                     # defines how many backup files you want to keep in the base directory
    warn_age: 7                 # optional: the script will output a warning, if the newest file in the repo is older than the defined value in days. If you expect daily backups, set this to 1.
    warn_bytes: 1000            # optional: the script will output a warning, if the newest file in the repo is smaller than the defined value in bytes.
    delete_old: false           # if set to false or omitted, the script will not actually delete files but log the files, which would have been deleted. Usefull for tests. 
    move_old_to: /data/backups/test_repo1/archive/ # optional: move files to this directory instead of deleting them. Overwrites 'delete_old'.
    rename_moved_files: 'moved-%Y-%m-%d_{}' # optional: rename files when they are moved. '{}' will be replaced by the original filename. Make sure the given 'pattern' still matches after renaming!
                                # % format codes can be used to add date and time. %Y-%m-%d will be replaced by the year, month and day the file was moved. See https://strftime.org/ for available format codes. 
    weekly:                     # optional: defines a directory to keep weekly backups. Directory must already exist.
        directory: /data/backups/test_repo1/weekly/
        keep: 1                 # how many weekly backups you want to keep
    monthly:                    # optional: defines a directory to keep monthly backups. Directory must already exist.
        directory: /data/backups/test_repo1/monthly/
        keep: 12                # how many monthly backups you want to keep
    yearly:                     # optional: defines a directory to keep yearly backups. Directory must already exist.
        directory: /data/backups/test_repo1/yearly/
        keep: 10                # how many yearly backups you want to keep

  - directory: /data/backups/test_repo2 # minimal example
    alias: Test-Repo 2
    pattern: "**/Test2*.bck"    # "**" means "this directory and all subdirectories, recursively". Use with caution!
    keep: 10
    delete_old: true

  - directory: /data/backups/config_archive1 # example repo with compliance checks and comparison
    pattern: "*.cfg"
    keep: 10
    warn_age: 1
    warn_bytes: 10
    delete_old: true
    compliance_check:           # optional: check if content of newest backup file matches the given regular expressions. Only works for text files!
      - regex: '^ip access-list 1 1\.2\.3\.4$' # Put 'single quotes' around regex and violation message! All Python regular expressions should work. See https://www.rexegg.com/regex-quickstart.html for example.
        violation_message: 'IP 1.2.3.4 is missing in ACL 1!' # optional, but usefull especially with long regexes.
      - regex: '^password (default|unsafe)'
        must_not_match: true    # regex must not match -> raise a violation if it matches
        violation_message: 'Unsafe Password "\1" set!' # \1 will be replaced by the 1st group match. \2 would be replaced by the 2nd and so on.
      - regex: '^ip access-list 1 (?!1\.2\.3\.4$|2\.3\.4\.5$)(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'
        must_not_match: true
        violation_message: 'Unallowed IP \1 in ACL 1!'
    compare_with_previous:      # optional: compare newest file with previous file. For this to work properly, the script should be run at the same interval at which the backup files are generated!
        warn_if_changed: true   # warn if newest file changed compared to previous one.
        warn_if_equal: false    # warn if newest file equals previous one.
        warn_age_limit: 2       # don't warn about changes if newest file is older than the defined age in days.
        log_diff: true          # log the differences between the two newest files at INFO level. Only works for text files smaller than 1MB (like config files etc.). Log will become large if there are many changes!
        delete_if_equal: true   # only keep the newest file if it differs from the previous one, otherwise delete it. 

# - directory:   ...            # you can add as many repository directories here as you want
#   pattern: ...
#   ...

logging:
    level: info                 # possible values: debug | info | warning | error
    file: /var/log/bck_mgmt.log # log file destination. If omitted, log will go to stdout.

